需要掌握的内容

- 八种包装类

  - 装箱/拆箱

  - Integer类常用方法

  - Integer String int三种类型互相转换

- 日期类
- 数字类
- 随机数
- 枚举

  



1、8种包装类型（以Integer为例）：

------

1、java中为8种基本数据类型又对应准备了8种包装类型。8种包装类属于**引用数据**类型，父类是Object。
2、为什么要再提供8种包装类呢？
    	因为8种基本数据类型不够用。
    	所以SUN又提供对应的8种包装类型。

​		有没有这种需求：调用doSome()方法的时候需要传一个数字进去。
​    	但是数字属于基本数据类型，而doSome()方法参数的类型是Object。
​    	可见doSome()方法无法接收基本数据类型的数字。

​		那怎么办呢？可以传一个数字对应的包装类进去。

3、**8种基本数据类型对应的包装类型名**:

| 基本数据类型 |      包装类型       |  父类  |
| :----------: | :-----------------: | :----: |
|     byte     |   java.lang.Byte    | Number |
|    short     |   java.lang.Short   | Number |
|     int      |  java.lang.Integer  | Number |
|     long     |   java.lang.Long    | Number |
|    float     |   java.lang.Float   | Number |
|    double    |  java.lang.Double   | Number |
|   boolean    |  java.lang.Boolean  | Object |
|     char     | java.lang.Character | Object |

4、八种包装类中其中6个都是数字对应的包装类，他们的父类都是Number，可以先研究Number中公共的方法：
    **Number**是一个**抽象类**，无法实例化对象。
    Number类中有这样的方法：
        byte byteValue() 以 byte 形式返回指定的数值。
        abstract  double doubleValue()以 double 形式返回指定的数值。
        abstract  float floatValue()以 float 形式返回指定的数值。
        abstract  int intValue()以 int 形式返回指定的数值。
        abstract  long longValue()以 long 形式返回指定的数值。
        short shortValue()以 short 形式返回指定的数值。
        这些方法其实所有的数字包装类的子类都有，这些方法是**负责拆箱**的。

​	手动：

```java
	// 123这个基本数据类型，进行构造方法的包装达到了：基本数据类型向引用数据类型的转换。
    // 基本数据类型 -(转换为)->引用数据类型（装箱）
    Integer i = new Integer(123);

    // 将引用数据类型--(转换为)-> 基本数据类型
    float f = i.floatValue();
    System.out.println(f); //123.0
    // 将引用数据类型--(转换为)-> 基本数据类型（拆箱）
    int retValue = i.intValue();
    System.out.println(retValue); //123
```

5、关于Integer类的构造方法，有两个：
    Integer(int)
    Integer(String)

​	Java9之后不建议使用这个构造方法了。出现横线表示已过时

```java
	// 将数字100转换成Integer包装类型（int --> Integer）
    Integer x = new Integer(100);
    System.out.println(x);
    // 将String类型的数字，转换成Integer包装类型。（String --> Integer）
    Integer y = new Integer("123");
    System.out.println(y);
    // double -->Double
    Double d = new Double(1.23);
    System.out.println(d);
    // String --> Double
    Double e = new Double("3.14");
    System.out.println(e);
```

6、通过访问包装类的常量，来获取最大值和最小值

```java
	System.out.println("byte的最大值：" + Byte.MAX_VALUE);// 127
    System.out.println("byte的最小值：" + Byte.MIN_VALUE);// -128
```

7、在java5之后，引入了一种新特性，自动装箱和自动拆箱
 *  自动装箱：基本数据类型自动转换成包装类。
 *  自动拆箱：包装类自动转换成基本数据类型。
 *  有了自动拆箱之后，Number类中的方法就用不着了！
 * 自动装箱和自动拆箱的好处：方便编程。

自动：

```java
	// 900是基本数据类型
    // x是包装类型
    // 基本数据类型 --(自动转换)--> 包装类型：自动装箱
    Integer x = 900;
    System.out.println(x);

    // x是包装类型
    // y是基本数据类型
    // 包装类型 --(自动转换)--> 基本数据类型：自动拆箱
    int y = x;
    System.out.println(y);
```

注意：

```java
    Integer a = 1000; // Integer a = new Integer(1000); a是个引用，保存内存地址指向对象。
    Integer b = 1000; // Integer b = new Integer(1000); b是个引用，保存内存地址指向对象。
    // == 比较的是对象的内存地址，a和b两个引用中保存的对象内存地址不同。
    // == 这个运算符不会触发自动拆箱机制。（只有+ - * /等运算的时候才会。）
    System.out.println(a == b); //false
```

8、重点：

```java
	Integer a = 128;
    Integer b = 128;
    System.out.println(a == b); //false
    /*
    java中为了提高程序的执行效率，将[-128到127]之间所有的包装对象提前创建好，
    放到了一个方法区的“整数型常量池”当中了，目的是只要用这个区间的数据不需要
    再new了，直接从整数型常量池当中取出来。

    原理：x变量中保存的对象的内存地址和y变量中保存的对象的内存地址是一样的。
     */
    Integer x = 127;
    Integer y = 127;
    // == 永远判断的都是两个对象的内存地址是否相同。
    System.out.println(x == y); //true
```

9、数字格式化异常：NumberFormatException

```
    // 编译的时候没问题，一切符合java语法，运行时会不会出问题呢？
    // 不是一个“数字”可以包装成Integer吗？不能。运行时出现异常。
    // java.lang.NumberFormatException
    //Integer a = new Integer("中文");
```

​	**总结一下之前所学的经典异常:**
​    	**空指针异常：NullPointerException**
​    	**类型转换异常：ClassCastException**
​    	**数组下标越界异常：ArrayIndexOutOfBoundsException**
​    	**数字格式化异常：NumberFormatException**

10、重点方法：**static int parseInt(String s)**

静态方法，传参String，返回int

```java
    //网页上文本框中输入的100实际上是"100"字符串。后台数据库中要求存储100数字，此时java程序需要			将"100"转换成100数字。
    int retValue = Integer.parseInt("123"); // String -转换-> int
    //int retValue = Integer.parseInt("中文"); // NumberFormatException
    System.out.println(retValue + 100);
```
11、了解内容：

```java
    // static String toBinaryString(int i)
    // 静态的：将十进制转换成二进制字符串。
    String binaryString = Integer.toBinaryString(3);
    System.out.println(binaryString); //"11" 二进制字符串

    // static String toHexString(int i)
    // 静态的：将十进制转换成十六进制字符串。
    String hexString = Integer.toHexString(16);
    System.out.println(hexString); // "10"

    // 十六进制：1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 13 14 15 16 17 18 19 1a
    hexString = Integer.toHexString(17);
    System.out.println(hexString); // "11"

    //static String toOctalString(int i)
    // 静态的：将十进制转换成八进制字符串。
    String octalString = Integer.toOctalString(8);
    System.out.println(octalString); // "10"

    System.out.println(new Object()); //java.lang.Object@6e8cf4c6

    // valueOf方法
    //static Integer valueOf(int i)
    // 静态的：int-->Integer
    Integer i1 = Integer.valueOf(100);
    System.out.println(i1);

    // static Integer valueOf(String s)
    // 静态的：String-->Integer
    Integer i2 = Integer.valueOf("100");
    System.out.println(i2);
```

12、**String int Integer之间互相转换**：

```java
    // String --> int
    int i1 = Integer.parseInt("100"); // i1是100数字
    System.out.println(i1 + 1); // 101

    // int --> String
    String s2 = i1 + ""; // "100"字符串
    System.out.println(s2 + 1); // "1001"

    // int --> Integer
    // 自动装箱
    Integer x = 1000;

    // Integer --> int
    // 自动拆箱
    int y = x;

    // String --> Integer
    Integer k = Integer.valueOf("123");

    // Integer --> String
    String e = String.valueOf(k);
```
------



2、日期类

------

1、java中对日期的处理：

​	最主要掌握：
​    	知识点1：怎么获取系统当前时间
​    	知识点2：String ---> Date
  	  知识点3：Date ---> String

​		知识点4：获取自1970年1月1日 00:00:00 000到当前系统时间的总毫秒数

​		知识点5：日期格式化： SimpleDateFormat

2、日期类：
	2.1、获取系统当前时间
		Date d = new Date();

​		java.util.Date类的toString()方法已经被重写了。
​    	输出的应该不是一个对象的内存地址，应该是一个日期字符串。
​    	System.out.println(d); //Sun Mar 29 20:39:06 CST 2020 美式风格

​	2.2、日期格式化：Date --> String
​		将日期类型Date，按照指定的格式进行转换：Date --转换成具有一定格式的日期字符串-->String
​    	SimpleDateFormat是java.text包下的。专门负责日期格式化的。
​    	yyyy 年(年是4位)
​    	MM 月（月是2位）
​    	dd 日
​    	HH 时
​    	mm 分
​    	ss 秒
​    	SS 毫秒（毫秒3位，最高999。1000毫秒代表1秒）
​    注意：在日期格式中，除了y M d H m s S这些字符不能随便写之外，剩下的符号格式自己随意组织。

```java
	SimpleDateFormat sdf = new SimpleDate("yyyy-MM-dd HH:mm:ss SSS");
	String s = sdf.format(new Date());
```
​	2.3、String --> Date
​			注意：字符串的日期格式和SimpleDateFormat对象指定的日期格式要一致。不然会出现异常：				  	 	   java.text.ParseException

```java
	SimpleDateFormat sdf = new SimpleDate("yyyy-MM-dd HH:mm:ss");
	Date d = sdf.parse("2008-08-08 08:08:08");  //Fri Aug 08 08:08:08 CST 2008
```

​	2.4、获取毫秒数

```java
	long nowTimeMillis = System.currentTimeMillis();
    System.out.println(nowTimeMillis);

    // 统计一个方法耗时
    // 在调用目标方法之前记录一个毫秒数
    long begin = System.currentTimeMillis();
    print();
    // 在执行完目标方法之后记录一个毫秒数
    long end = System.currentTimeMillis();
    System.out.println("耗费时长"+(end - begin)+"毫秒");

	// 需求：统计一个方法执行所耗费的时长
	public static void print(){
    for(int i = 0; i < 1000000000; i++){
        System.out.println("i = " + i);
    }
        
	// 获取昨天的此时的时间。
    Date time2 = new Date(System.currentTimeMillis() - 1000 * 60 * 60 * 24);
    String strTime2 = sdf.format(time2);
    System.out.println(strTime2); 
```
2.5、简单总结一下System类的相关属性和方法：
		System.out 【out是System类的静态变量】
    	System.out.println() 【println()方法不是System类的，是PrintStream类的方法】
    	System.gc() 建议启动垃圾回收器
		System.arraycopy() 数组的复制扩容
   	 System.currentTimeMillis() 获取自1970年1月1日到系统当前时间的总毫秒数
    	System.exit(0) 退出JVM

------



3、数字类:

------

1、DecimalFormat数字格式化

​	数字格式有哪些？

​		#	  代表任意数字

​        ,  	 代表千分位
​        .  	 代表小数点
​        0 	 代表不够时补0

###,###.## 表示加入千分位，保留两个小数。
###,###.0000 表示加入千分位，保留4个小数，不够补0
2、BigDecimal：

 	2.1、BigDecimal 属于大数据，精度极高。不属于基本数据类型，属于java对象（引用数据类型）

​	 		 这是SUN提供的一个类。专门用在财务软件当中。

​	 2.2、注意：

​	 		1、财务软件中double是不够的，财务软件中通常使用java.math.BigDecimal

​			 2、

```java
		// 这个100不是普通的100，是精度极高的100
        BigDecimal v1 = new BigDecimal(100);
        // 精度极高的200
        BigDecimal v2 = new BigDecimal(200);
        // 求和
        // v1 + v2; // 这样不行，v1和v2都是引用，不能直接使用+求和。
        BigDecimal v3 = v1.add(v2); // 调用方法求和。
        System.out.println(v3); //300
```

------



4、随机数：

------

4.1、怎么产生int类型随机数。
		Random r = new Random();
		int i = r.nextInt();
4.2、怎么产生某个范围之内的int类型随机数。
		Random r = new Random();
		int i = r.nextInt(101); // 产生[0-100]的随机数。

------



5、枚举：

------

5.1、枚举是一种引用数据类型。
5.2、枚举编译之后也是class文件。
5.3、枚举类型怎么定义？
	enum 枚举类型名{
		枚举值,枚举值2,枚举值3
	}

5.4、枚举中的每一个值可以看做是常量。

5.5、什么时候使用枚举：

在以后的开发中，有可能遇到一个方法的执行结果可能包括三种情况，
四种情况，五种情况不等，但是每一个都是可以数清楚的，一枚一枚都是可以列举出来的。
这个布尔类型就无法满足需求了。此时就建议将返回值类型设计为枚举类型。

5.5、注意：switch语句支持枚举类型        

```java
    // switch也支持String、int
    // 低版本的JDK，只支持int
    // 高版本的JDK，支持int、String、枚举。
    // byte short char也可以，因为存在自动类型转换。
    switch (Season.SPRING) {
    // 必须省略Season.
    case SPRING:
    System.out.println("春天");
    break;
    case SUMMER:
    System.out.println("夏天");
    break;
    case AUTUMN:
    System.out.println("秋天");
    break;
    case WINTER:
    System.out.println("冬天");
    break;
    }
```

------

