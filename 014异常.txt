需要掌握的内容：

- 异常






1、异常：

------

1、异常处理机制：
	1.1、java中异常的作用是：**增强程序健壮性**。
	1.2、java中异常以**类和对象**的形式存在。

2、异常对应的现实生活中是怎样的？
        火灾(异常类)：
            2008年8月8日,小明家着火了（异常对象）
            2008年8月9日,小刚家着火了（异常对象）
            2008年9月8日,小红家着火了（异常对象）

​    	类是：模板。
​    	对象是：实际存在的个体。

​    	钱包丢了（异常类）：
​        2008年1月8日，小明的钱包丢了（异常对象）
​        2008年1月9日，小芳的钱包丢了（异常对象）
​        ....

```java
	// 通过“异常类”创建“异常对象”
    NullPointerException npe = new NullPointerException("空指针异常发生了！");

    //java.lang.NullPointerException: 空指针异常发生了！
    System.out.println(npe);
```
3、程序发生**异常时**会**在底层new**了一个**异常对象**，然后**抛出**。

```java
    /*
    程序执行到此处发生了ArithmeticException异常，
    底层new了一个ArithmeticException异常对象，
    然后抛出了，由于是main方法调用了100 / 0，
    所以这个异常ArithmeticException抛给了main方法，
    main方法没有处理，将这个异常自动抛给了JVM。
    JVM最终终止程序的执行。    
    ArithmeticException 继承 RuntimeException，属于运行时异常。
    在编写程序阶段不需要对这种异常进行预先的处理。
    */
    System.out.println(100 / 0);

    // 这里的HelloWorld没有输出，没有执行。
    System.out.println("Hello World!");
```

4、以下代码报错的原因：
    因为doSome()方法声明位置上使用了：throws ClassNotFoundException
    而ClassNotFoundException是**编译时异常**。必须编写代码时处理，**没有处理**
    编译器**报错**。

```java
    public static void main(String[] args) {
    // main方法中调用doSome()方法
    // 因为doSome()方法声明位置上有：throws ClassNotFoundException
    // 我们在调用doSome()方法的时候必须对这种异常进行预先的处理。
    // 如果不处理，编译器就报错。
    // 编译器报错信息： Unhandled exception: java.lang.ClassNotFoundException
    // doSome();
    }

    /**
    * doSome方法在方法声明的位置上使用了：throws ClassNotFoundException
    * 这个代码表示doSome()方法在执行过程中，有可能会出现ClassNotFoundException异常。
    * 叫做类没找到异常。这个异常直接父类是：Exception，所以ClassNotFoundException属于编译时异常。
    * @throws ClassNotFoundException
    */
    public static void doSome() throws ClassNotFoundException{
    System.out.println("doSome!!!!");
    }
```

5、处理异常的两种方法：

​	5.1、处理异常的第一种方式：
​		在方法**声明**的位置上**使用throws关键字抛出**，谁调用我这个方法，我就抛给谁。**抛给调用者来处理**。
​		这种处理异常的态度：上报。

​	注意：一般**不**建议**在main方法上使用throws**，因为这个异常如果真正的发生，一定会抛给JVM。JVM只有终				止。
​				异常处理机制的作用就是增强程序的健壮性。怎么能做到，异常发生了也不影响程序的执行。所以
​				**一般main方法中的异常建议使用try..catch进行捕捉**。main就**不要继续上抛**了。

​	5.2、处理异常的第二种方式：
​    	使用try..catch语句对异常进行捕捉。
​    	这个异常不会上报，自己把这个事儿处理了。
​    	异常抛到此处为止，不再上抛了。

​	5.3、注意：
​    	只要**异常没有捕捉**，采用上报的方式，此方法的**后续代码不会执行**。
​    	另外需要注意，**try语句块中的某一行出现异常**，该行**后面的代码不会执行**。
​    	try..catch**捕捉异常之后**，**后续代码可以执行**。

​	5.4、在以后的开发中，处理编译时异常，应该上报还是捕捉呢，怎么选？
​    	如果**希望调用者**来处理，选择**throws**上报。
​    	其它情况使用捕捉的方式。

​	5.5、测试：

```java
// 一般不建议在main方法上使用throws，因为这个异常如果真正的发生了，一定会抛给JVM。JVM只有终止。
// 异常处理机制的作用就是增强程序的健壮性。怎么能做到，异常发生了也不影响程序的执行。所以
// 一般main方法中的异常建议使用try..catch进行捕捉。main就不要继续上抛了。
/*
public static void main(String[] args) throws FileNotFoundException {
    System.out.println("main begin");
    m1();
    System.out.println("main over");
}
 */
public static void main(String[] args) {

    // 100 / 0这是算术异常，这个异常是运行时异常，你在编译阶段，可以处理，也可以不处理。编译器不管。
    //System.out.println(100 / 0); // 不处理编译器也不管
    // 你处理也可以。
    /*
    try {
        System.out.println(100 / 0);
    } catch(ArithmeticException e){
        System.out.println("算术异常了！！！！");
    }
     */

    System.out.println("main begin");
    try {
        // try尝试
        m1();
        // 以上代码出现异常，直接进入catch语句块中执行。
        System.out.println("hello world!");
    } catch (FileNotFoundException e){ // catch后面的好像一个方法的形参。
        // 这个分支中可以使用e引用，e引用保存的内存地址是那个new出来异常对象的内存地址。
        // catch是捕捉异常之后走的分支。
        // 在catch分支中干什么？处理异常。
        System.out.println("文件不存在，可能路径错误，也可能该文件被删除了！");
        System.out.println(e); //java.io.FileNotFoundException: D:\course\01-课\学习方法.txt (系统找不到指定的路径。)
    }

    // try..catch把异常抓住之后，这里的代码会继续执行。
    System.out.println("main over");
}

private static void m1() throws FileNotFoundException {
    System.out.println("m1 begin");
    m2();
    // 以上代码出异常，这里是无法执行的。
    System.out.println("m1 over");
}

// 抛别的不行，抛ClassCastException说明你还是没有对FileNotFoundException进行处理
// private static void m2() throws ClassCastException{
// 抛FileNotFoundException的父对象IOException，这样是可以的。因为IOException包括FileNotFoundException
// private static void m2() throws IOException {
// 这样也可以，因为Exception包括所有的异常。
// private static void m2() throws Exception{
// throws后面也可以写多个异常，可以使用逗号隔开。
// private static void m2() throws ClassCastException, FileNotFoundException{
private static void m2() throws FileNotFoundException {
    System.out.println("m2 begin");
    // 编译器报错原因是：m3()方法声明位置上有：throws FileNotFoundException
    // 我们在这里调用m3()没有对异常进行预处理，所以编译报错。
    // m3();

    m3();
    // 以上如果出现异常，这里是无法执行的！
    System.out.println("m2 over");
}

private static void m3() throws FileNotFoundException {
    // 调用SUN jdk中某个类的构造方法。
    // 这个类还没有接触过，后期IO流的时候就知道了。
    // 我们只是借助这个类学习一下异常处理机制。
    // 创建一个输入流对象，该流指向一个文件。
    /*
    编译报错的原因是什么？
        第一：这里调用了一个构造方法：FileInputStream(String name)
        第二：这个构造方法的声明位置上有：throws FileNotFoundException
        第三：通过类的继承结构看到：FileNotFoundException父类是IOException，IOException的父类是Exception，
        最终得知，FileNotFoundException是编译时异常。

        错误原因？编译时异常要求程序员编写程序阶段必须对它进行处理，不处理编译器就报错。
     */
    //new FileInputStream("C:\Users\风间&琉璃\Desktop\文件\java\我\java学习笔记\java");

    // 我们采用第一种处理方式：在方法声明的位置上使用throws继续上抛。
    // 一个方法体当中的代码出现异常之后，如果上报的话，此方法结束。
    new FileInputStream("C:\Users\Desktop\文件\java\我\java学习笔记\jav");

    System.out.println("如果以上代码出异常，这里会执行吗??????????????????不会！！！");
}
```
6、深入try..catch：

​	6.1、catch后面的小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型。（多态）
​	6.2、catch可以写多个。建议catch的时候，精确的一个一个处理。这样有利于程序的调试。
​	6.3、catch写多个的时候，从上到下，必须遵守从小到大。
​	6.4、JDK8的新特性：在catch中可以用|选取多个异常：

```java
try {
    //创建输入流
    FileInputStream fis = new FileInputStream("C:\Users\Desktop\文件\java\我\java学习笔记\jav");
    // 进行数学运算
    System.out.println(100 / 0); // 这个异常是运行时异常，编写程序时可以处理，也可以不处理。
} catch(FileNotFoundException | ArithmeticException | NullPointerException e) {
    System.out.println("文件不存在？数学异常？空指针异常？都有可能！");
}
```
7、异常对象有两个非常重要的方法：

​	7.1、**获取异常简单的描述信息**：
​    String msg = exception.getMessage();

​	7.2、**打印异常追踪的堆栈信息**：
​    exception.printStackTrace(); // 一般都是使用这个。

​	**在实际的开发中，建议使用这个。养成好习惯！**
​    **这行代码要写上，不然出问题你也不知道！**

​	7.3、我们以后查看异常的追踪信息，我们应该怎么看，可以快速的调试程序呢？
​	异常信息追踪信息，**从上往下**一行一行看。
​	但是需要注意的是：SUN写的代码就不用看了(看包名就知道是自己的还是SUN的。)。
​	主要的问题是出现在**自己编写的代码**上。

8、关于try..catch中的finally子句：
     8.1、在finally子句中的代码是**最后执行**的，并且是**一定会执行的**，即使try语句块中的代码出现了异常。
        finally子句必须和try一起出现，**不能单独编写**。

​	 8.2、finally语句通常使用在哪些情况下呢？
​    	通常在finally语句块中**完成资源的释放/关闭**。
​    	因为finally中的代码比较有保障。
​    	即使try语句块中的代码出现异常，finally中代码也会正常执行。放在finally语句块中的代码是一定会执行的！

​		但有一种方法可以**终止finally**中代码的执行：在try的代码块在**加入System.exit(0)** // 退出JVM;

​	  8.3、try和finally，没有catch可以吗？可以。
​        	try不能单独使用。
​       	 **try finally可以联合使用**。
​    	以下代码的执行顺序：
​        	先执行try...
​        	再执行finally...
​        	最后执行 return （return语句只要执行方法必然结束。）

```java
	try {
        System.out.println("try...");
        return;
    } finally {
        // finally中的语句会执行。能执行到。
        System.out.println("finally...");
    }
```
​		8.4、经典题目：

```java
    public static void main(String[] args) {
        int result = m();
        System.out.println(result); //100
    }

    /*
    java语法规则（有一些规则是不能破坏的，一旦这么说了，就必须这么做！）：
        java中有一条这样的规则：
            方法体中的代码必须遵循自上而下顺序依次逐行执行（亘古不变的语法！）
        java中海油一条语法规则：
            return语句一旦执行，整个方法必须结束（亘古不变的语法！）
     */
    public static int m(){
        int i = 100;
        try {
            // 这行代码出现在int i = 100;的下面，所以最终结果必须是返回100
            // return语句还必须保证是最后执行的。一旦执行，整个方法结束。
            return i;
        } finally {
            i++;
        }
    }

    /*
    反编译之后的效果
    public static int m(){
        int i = 100;
        int j = i;
        i++;
        return j;
    }
     */
```

9、final finally finalize有什么区别？
    **final** 关键字
        final修饰的**类无法继承**
        final修饰的**方法无法覆盖**
        final修饰的**变量不能重新赋值**。

​	**finally** 关键字
​    	**和try一起联合使用**。
​    	finally语句块中的**代码是必须执行的**。

​	**finalize** 标识符
   	 是一个**Object类中的方法名**。
​    	这个方法是**由垃圾回收器GC负责调用**的。

10、之前在讲解方法覆盖的时候，当时遗留了一个问题：
    重写之后的方法不能比重写之前的方法抛出更多（更宽泛）的异常，可以更少。

```java
    class Animal {
        public void doSome(){

        }

        public void doOther() throws Exception{

        }

    }

    class Cat extends Animal {

        // 编译正常。
        public void doSome() throws RuntimeException{

        }

        // 编译报错。
        /*public void doSome() throws Exception{

    }*/

        // 编译正常。
        /*public void doOther() {

    }*/

        // 编译正常。
        /*public void doOther() throws Exception{

    }*/

        // 编译正常。
        public void doOther() throws NullPointerException{

        }

    }
```

11、自定义异常：

​	SUN提供的JDK内置的异常肯定是不够的用的。在实际的开发中，有很多业务，
​	这些业务出现异常之后，JDK中都是没有的。和业务挂钩的。那么异常类我们
​	程序员可以自己定义吗？		可以。 

​	Java中怎么自定义异常呢？
​    两步：
​        第一步：**编写一个类继承Exception或者RuntimeException**.
​        第二步：**提供两个构造方法，一个无参数的，一个带有String参数的{super（s）}**。

12、总结异常中的关键字：
    异常捕捉：
        try
        catch
        finally

​		throws 在**方法声明位置**上使用，表示**上报异常**信息给调用者。
​		throw **手动抛出异常**！

13、关于异常：

​			13.1、异常在java中以类和对象的形式存在。那么异常的继承结构是怎样的？
​			我们可以使用UML图来描述一下继承结构：
​			（画UML图有很多工具，例如：Rational Rose（收费的）、starUML等....）
​			Object
​			Object下有Throwable（可抛出的）
​			Throwable下有两个分支：Error（不可处理，直接退出JVM）和Exception（可处理的）
​			Exception下有两个分支：
​				Exception的直接子类：**编译时异常**（要求程序员在**编写程序**阶段**必须**预先对这些异常进行**处理**，如果不				处理编译器报错，因此得名编译时异常。）。
​				RuntimeException：运行时异常。（在编写程序阶段程序员可以预先处理，也**可以不管**，都行。）

​			13.2、**编译时异常和运行时异常，都是发生在运行阶段**。**编译阶段异常是不会发生的**。
​			编译时异常因为什么而得名？
​			因为编译时异常必须在编译(编写)阶段预先处理，如果不处理编译器报错，因此得名。
​			所有异常都是在运行阶段发生的。因为只有程序运行阶段才可以new对象。
​			因为异常的发生就是new异常对象。

​			13.3、编译时异常和运行时异常的区别？

​			编译时异常一般发生的**概率比较高**。
​			举个例子：
​				你看到外面下雨了，倾盆大雨的。
​				你出门之前会预料到：如果不打伞，我可能会生病（生病是一种异常）。
​				而且这个异常发生的概率很高，所以我们出门之前要拿一把伞。
​				“拿一把伞”就是对“生病异常”发生之前的一种处理方式。

​				对于一些发生概率较高的异常，需要在运行之前对其进行预处理。

​			运行时异常一般发生的**概率比较低**。
​			举个例子：
​				小明走在大街上，可能会被天上的飞机轮子砸到。
​				被飞机轮子砸到也算一种异常。
​				但是这种异常发生概率较低。
​				在出门之前你没必要提前对这种发生概率较低的异常进行预处理。
​				如果你预处理这种异常，你将活的很累。
​	
​			假设你在出门之前，你把能够发生的异常都预先处理，你这个人会更加
​			的安全，但是你这个人活的很累。
​	
​			假设java中没有对异常进行划分，没有分为：编译时异常和运行时异常，
​			所有的异常都需要在编写程序阶段对其进行预处理，将是怎样的效果呢？
​				首先，如果这样的话，程序肯定是绝对的安全的。
​				但是程序员编写程序太累，代码到处都是处理异常
​				的代码。

​			13.4、编译时异常还有其他名字：
​			**受检异常**：CheckedException
​			**受控异常**

​			13.5、运行时异常还有其它名字：
​			**未受检异常**：UnCheckedException
​			**非受控异常**

​			13.6、再次强调：**所有异常都是发生在运行阶段的**。

14、什么是UML？有什么用？
	UML是一种**统一建模语言**。
	一种**图标式语言**（画图的）
	UML不是只有java中使用。只要是面向对象的编程语言，都有UML。
	一般画UML图的都是软件架构师或者说是系统分析师。这些级别的人员使用的。
	软件设计人员使用UML。

​	在UML图中可以描述类和类之间的关系，程序执行的流程，对象的状态等.

​	盖大楼和软件开发一样，一个道理。
​	盖楼之前，会先由建筑师画图纸。图纸上一个一个符号都是标准符号。
​	这个图纸画完，只要是搞建筑的都能看懂，因为这个图纸上标注的这些
​	符号都是一种“标准的语言”。

​	在java软件开发当中，软件分析师/设计师负责设计类，java软件开发人员
​	必须要能看懂。

------

